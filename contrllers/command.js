import {
    helpText,
    priceList,
    firstStepAnswerTitlesMap,
    firstStepPicturesMap,
    firstStepFilesMap,
    differentActionsButtons,
    otherTextAnswer,
} from '../config/consts.js';
import { Markup } from 'telegraf';
import { fmt, link, bold } from "telegraf/format";

const start = async ctx => {
    try {
        await ctx.replyWithHTML(
            `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å ${ctx.message?.from?.first_name || '–≤ –Ω–∞—à–µ–º –±–æ—Ç–µ'}!\n\n` +
            '<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é:</b>' +
            helpText +
            '\n\n–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–Ω–∏ –∏–∑ —Å–∞–º—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –≥–æ—Ä–æ–¥–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ, ' +
            '–ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å –≤–∏–¥–∞–º–∏ –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –∏–º–∏ —Ä–∞–±–æ—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥!\n\n' +
            '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ —É—Å–ª—É–≥:</b>',
            Markup.inlineKeyboard(priceList.map(item => {
                return [Markup.button.callback(item.title, item.id)]
            }))
        );
        await ctx.replyWithHTML(
            '<b>–¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–Ω–∞–∫—Ç–æ–≤ –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:</b>\n\n',
            Markup.inlineKeyboard([[
                Markup.button.callback(
                    differentActionsButtons.sendContacts.title,
                    differentActionsButtons.sendContacts.id
                )]])
        );
        await ctx.replyWithHTML(
            '<b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤:</b>\n\n',
            Markup.inlineKeyboard([[
                Markup.button.callback(
                    differentActionsButtons.addContacts.title,
                    differentActionsButtons.addContacts.id
                )]])
        );

    } catch (error) {
        await console.log('`–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ /start –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ -', error);
        await ctx.reply(`–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ /start –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ - ${error.message}`)
    }

};
const help = async ctx => {
    await ctx.reply(helpText);
};

const servicesList =  async ctx => {
    await ctx.replyWithHTML(
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ —É—Å–ª—É–≥:</b>',
        Markup.inlineKeyboard(priceList.map(item => {
            return [Markup.button.callback(item.title, item.id)]
        }))
    );
}

const createReplyFunction = (type) => {
    return async ctx => {
        try {
            await ctx.answerCbQuery();
            await ctx.replyWithPhoto(
                { source: firstStepPicturesMap[type]},
                { caption: fmt
                        `${bold`${firstStepAnswerTitlesMap[type]}.`}
            \n${link(
                            'üîóüìã–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Çüëà',
                            `${firstStepFilesMap[type]}`
                        )}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å—Å—ã–ª–æ–∫, –≤–æ—Å–ø–æ–ª–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π  /list
            `
                }
            );
        } catch (error) {
            console.error('Error while 1_appliances_repair processing - ', error.message);
        }
    }
};

const appliances_repair_command = createReplyFunction('appliances_repair');
const plumber_command = createReplyFunction('plumber');
const finishing_works_command = createReplyFunction('finishing_works');
const construction_command = createReplyFunction('construction');
const send_contacts_command = async (ctx, hideAddContacts) => {
    try {
        await ctx.replyWithHTML(
            `<b>–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –ü–∞–≤–µ–ª</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+7(999)999-99-99">+7(999)999-99-99</a>\n
            \n<b>–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –í–∏—Ç–∞–ª–∏–π</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+7(999)999-99-99">+7(999)999-99-99</a>`
        );
        if (!hideAddContacts) {
            await ctx.replyWithHTML('–î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫ —Å–µ–±–µ –≤ –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–≥—É:',
                Markup.inlineKeyboard(
                    [Markup.button.callback(
                        '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
                        'btn_get_contacts'
                    )])
            );
        }
        await ctx.replyWithHTML('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥:',
            Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', 'btn_back')])
        );
    } catch (error) {
        console.error('Error while send_contacts_command processing - ', error.message);
    }
};
const add_contacts_command = async ctx => {
    try {
        if (ctx && !ctx.message) {
            await ctx.answerCbQuery();
        }
        await ctx.sendContact('+7(999)999-99-99', '–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –ü–∞–≤–µ–ª');
        await ctx.sendContact('+7(999)999-99-99', '–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ –í–∏—Ç–∞–ª–∏–π');
    } catch (error) {
        await ctx.reply(
            '–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–µ—Ä–µ—Å—Ç–∞–ª –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å' +
            ', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ :)'
        );
        await send_contacts_command(ctx, true);
        console.error('Error while add_contacts_command processing - ', error.message);
    }
};

const not_understand_command = async ctx => {
    try {
        await ctx.replyWithHTML(otherTextAnswer);
    } catch (error) {
        console.error('Hearing Error - ', error.message);
    }
};

export {
    start,
    help,
    servicesList,
    appliances_repair_command,
    plumber_command,
    finishing_works_command,
    construction_command,
    send_contacts_command,
    add_contacts_command,
    not_understand_command
}